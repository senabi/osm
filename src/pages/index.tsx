import type { NextPage } from "next";
import { useSession, signIn, signOut } from "next-auth/react";
import Head from "next/head";
import React from "react";
import { trpc } from "../utils/trpc";
import { io } from "socket.io-client";
import type { Socket } from "socket.io-client";

const SocketView: React.FC<{ id: string }> = ({ id }) => {
  const renders = React.useRef(1);
  const socket = React.useMemo(() => {
    const conn = io("ws://localhost:3001");
    conn.on("connect", () => {
      console.log("connect", socket.id);
    });
    conn.on("disconnect", () => {
      console.log("disconnect", socket.id);
    });
    conn.emit("random");
    conn.on("random", num => {
      console.log(num);
    });
    return conn;
  }, []);
  renders.current++;
  React.useEffect(() => {
    // const socket = React.useMemo<Socket<DefaultEventsMap, DefaultEventsMap>>(() => io("ws://localhost:3001"), []);
    // const socket = io("ws://localhost:3001");
    // socket.on("connect", () => {
    //   console.log("connect", socket.id);
    // });
    // socket.on("disconnect", () => {
    //   console.log("disconnect", socket.id);
    // });
    // socket.emit("random");
    // socket.on("random", num => {
    //   console.log(num);
    // });
    return () => {
      console.log(`ws connection with ${socket.id} was closed`);
      socket.close();
    };
  }, []);
  return <>Number renders: {renders.current}</>;
};

const HomeContent = () => {
  const { data, status } = useSession();

  if (status === "loading") return <div>Loading...</div>;

  if (!data)
    return (
      <div>
        <div>Please log in</div>
        <button
          onClick={() => signIn("google")}
          className="bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow block m-1"
        >
          Sign In with Google
        </button>
        <button
          onClick={() => signIn("discord")}
          className="bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow block m-1"
        >
          Sign In with Discord
        </button>
      </div>
    );

  return (
    <div>
      Hello {data.user?.name}
      <button
        onClick={() => signOut()}
        className="bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow block"
      >
        Sign Out
      </button>
      <div>
        <SocketView id={data.user!.id} />
      </div>
    </div>
  );
};

const Home: NextPage = () => {
  // const hello = trpc.useQuery(["example.hello", { text: "from tRPC" }]);
  // const msg = trpc.useQuery(["auth.getSecretMessage"]);

  return (
    <>
      <Head>
        <title>Video App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col items-center justify-center min-h-screen p-4">
        <HomeContent />
        {/* <div className="pt-6 text-2xl text-blue-500 flex justify-center items-center w-full">
          {hello.data ? <p>{hello.data.greeting}</p> : <p>Loading..</p>}
        </div>
        <div>{msg.data ? <p>{msg.data}</p> : null}</div> */}
      </main>
    </>
  );
};

export default Home;
